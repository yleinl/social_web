# same code as data.ipynb
import praw
import pandas as pd
from datetime import datetime
from textblob import TextBlob


# Configure Reddit API
reddit = praw.Reddit(
    client_id="zC96I9IB346LY9OD5RSrmg",       # Replace with your Client ID
    client_secret="iNJWZGyfD17UIAs4KxCyoS8xa4_eSQ", # Replace with your Secret Key
    user_agent="ytlei2",  # Custom user agent
)


def fetch_candidate_comments(candidate, party, num_comments=1000):
    """
    Fetch comments from Reddit for a specific candidate.
    """
    comments_data = []
    subreddit = reddit.subreddit("politics")
    comment_count = 0  # Track the number of comments fetched

    # Search posts related to the candidate
    for submission in subreddit.search(candidate, limit=num_comments):
        submission.comments.replace_more(limit=0)  # Flatten the comment tree
        for comment in submission.comments.list():
            if comment_count >= num_comments:  # Stop if we've collected enough comments
                break
            comments_data.append({
                "comment_id": comment.id,
                "user_handle": comment.author.name if comment.author else "deleted",
                "timestamp": datetime.fromtimestamp(comment.created_utc),
                "comment_text": comment.body,
                "candidate": candidate,
                "party": party,
                "upvotes": comment.score,
                "replies": len(comment.replies) if hasattr(comment, "replies") else 0,
                "awards": comment.total_awards_received  # Awards count
            })
            comment_count += 1
        if comment_count >= num_comments:  # Break out of outer loop if limit reached
            break

    return pd.DataFrame(comments_data)


def is_bot_comment(user_handle, comment_text):
    """
    Check if a comment is generated by a bot.
    """
    bot_indicators = ['AutoModerator', 'bot', 'moderator']
    if any(indicator.lower() in (user_handle or '').lower() for indicator in bot_indicators):
        return True
    if "I am a bot" in comment_text or "this action was performed automatically" in comment_text:
        return True
    return False


def is_relevant_comment(comment_text, keywords):
    """
    Check if a comment is relevant based on given keywords.
    """
    blob = TextBlob(comment_text)
    return any(keyword.lower() in blob.words.lower() for keyword in keywords)


def filter_high_quality_comments(df, candidates, short, top_n=100):
    """
    Filter comments to retain only high-quality ones.
    """
    def contains_single_candidate(comment_text, candidates):
        count = sum(candidate.lower() in comment_text.lower() for candidate in candidates)
        return count < 2

    # Remove bot comments
    df = df[~df.apply(lambda row: is_bot_comment(row['user_handle'], row['comment_text']), axis=1)]

    # Filter out comments mentioning more than one candidate
    df = df[df['comment_text'].apply(lambda x: contains_single_candidate(x, candidates))]
    df = df[df['comment_text'].apply(lambda x: contains_single_candidate(x, short))]

    # Sort and select top N comments per candidate
    df = df.sort_values(['candidate', 'upvotes'], ascending=[True, False])
    filtered_df = df.groupby('candidate').head(top_n)

    return filtered_df


def main():
    # Define candidates and their parties
    candidates_info = {
        "Kamala Harris": "Democratic",
        "Donald Trump": "Republican",
        "Jill Stein": "Green",
        "Robert Kennedy": "Independent",
        "Chase Oliver": "Libertarian"
    }

    # Fetch data for each candidate
    all_comments = []
    for candidate, party in candidates_info.items():
        print(f"Fetching comments for {candidate} ({party})...")
        candidate_comments = fetch_candidate_comments(candidate, party, num_comments=1000)
        all_comments.append(candidate_comments)

    # Combine all candidates' comments into a single DataFrame
    comments_df = pd.concat(all_comments, ignore_index=True)

    # Define candidates' names and their short forms
    candidates_list = ["Kamala Harris", "Donald Trump", "Jill Stein", "Robert Kennedy", "Chase Oliver"]
    candidates_short_list = ["Harris", "Trump", "Stein", "Kennedy", "Oliver"]

    # Filter high-quality comments
    filtered_comments_df = filter_high_quality_comments(
        comments_df, candidates=candidates_list, short=candidates_short_list, top_n=100
    )

    # Save to CSV
    filtered_comments_df.to_csv("filtered_reddit_comments.csv", index=False)
    print("Filtered comments saved to 'filtered_reddit_comments.csv'.")

    # Display the first few rows
    print(filtered_comments_df.head())


if __name__ == "__main__":
    main()
